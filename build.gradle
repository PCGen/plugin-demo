import org.gradle.api.artifacts.*

apply plugin: 'base' // To add "clean" task to the root project.

subprojects {
    apply from: rootProject.file('common.gradle')
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
       subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'net.sourceforge.javydreamercsw.Main'
}

task copyToLibs(type: Copy) {
    outputs.upToDateWhen { false }
    into "$projectDir/libs"
    from("ModePlugin1/build/libs"){
        exclude '**/*sources*.jar'
    }
    from("ModePlugin2/build/libs"){
        exclude '**/*sources*.jar'
    }
    from('UI/build/libs') {
        exclude '**/UI*.jar'
    }
}

task copyMain(type: Copy) {
    outputs.upToDateWhen { false }
    into "$projectDir"
    from('UI/build/libs') {
        include '**/UI*.jar'
        exclude '**/UI*sources.jar'
    }
}

clean.doFirst {
    delete fileTree('${rootDir}') {
        include '*.jar'
    }
    delete "${rootDir}/libs/"
}

build.finalizedBy('copyToLibs', 'copyMain', 'zip')

task zip(type: Zip) {
   outputs.file('demo.zip')
   from '.'
   include 'UI-1.0-SNAPSHOT.jar'
   include 'libs/*'
   include 'run.bat'
   include 'run.sh'
   archiveName 'demo.zip'
}
